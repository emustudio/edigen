%auto_gen_warning%
package %decoder_package%;

import net.emustudio.emulib.plugins.cpu.DecodedInstruction;
import net.emustudio.emulib.plugins.cpu.Decoder;
import net.emustudio.emulib.plugins.cpu.InvalidInstructionException;
import net.emustudio.emulib.plugins.memory.MemoryContext;
import net.emustudio.emulib.runtime.helpers.NumberUtils;

import java.util.Arrays;
import java.util.Objects;

/**
 * The instruction decoder.
 */
public class %decoder_class% implements Decoder {
    private static final int MAX_INSTRUCTION_BYTES = %max_instruction_bytes%;

    private byte[] instructionBytes;
    private final MemoryContext<? extends Number> memory;

    private int unit;
    private DecodedInstruction instruction;
    
    %decoder_fields%
    
    /**
     * The constructor.
     * @param memory the memory context which will be used to read instructions
     */
    public %decoder_class%(MemoryContext<? extends Number> memory) {
        this.memory = Objects.requireNonNull(memory);
    }
    
    /**
     * Decodes an instruction.
     * @param memoryPosition the address of the start of the instruction
     * @return the decoded instruction object
     * @throws InvalidInstructionException when decoding is not successful
     */
    @Override
    public DecodedInstruction decode(int memoryPosition) throws InvalidInstructionException {
        this.instructionBytes = NumberUtils.numbersToNativeBytes(memory.read(memoryPosition, MAX_INSTRUCTION_BYTES));

        instruction = new DecodedInstruction();
        %root_rule%(0);
        instruction.setImage(Arrays.copyOfRange(instructionBytes, 0, this.instructionBytes.length));
        return instruction;
    }

    /**
     * Reads an arbitrary number of bits of the current instruction.
     * Bits are read in little endian
     *
     * @param start the number of bits from the start of the current instruction
     * @param length the number of bits to read
     * @return the bytes read
     */
    private int readBits(int start, int length) {
        int startByte = start / 8;
        int endByte = (start + length - 1) / 8;

        int value = NumberUtils.readInt(
            instructionBytes, startByte, endByte - startByte + 1, NumberUtils.Strategy.LITTLE_ENDIAN
        );
        int clearLSB = (0xFF >> (start % 8));
        int shift = (8 - ((start + length) % 8)) % 8;
        return (value & clearLSB) >> shift;
    }
    
    %decoder_methods%
}