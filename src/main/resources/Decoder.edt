%auto_gen_warning%
package %decoder_package%;

import net.emustudio.emulib.plugins.cpu.DecodedInstruction;
import net.emustudio.emulib.plugins.cpu.Decoder;
import net.emustudio.emulib.plugins.cpu.InvalidInstructionException;
import net.emustudio.emulib.plugins.memory.MemoryContext;

import java.util.Arrays;
import java.util.Objects;

/**
 * The instruction decoder.
 */
public class %decoder_class% implements Decoder {
    private final byte[] instructionBytes = new byte[1024];
    private final MemoryContext<?> memory;
    private int memoryPosition;
    private int unit;
    private int bytesRead;
    private DecodedInstruction instruction;
    
    %decoder_fields%
    
    /**
     * The constructor.
     * @param memory the memory context which will be used to read instructions
     */
    public %decoder_class%(MemoryContext<?> memory) {
        this.memory = Objects.requireNonNull(memory);
    }
    
    /**
     * Decodes an instruction.
     * @param memoryPosition the address of the start of the instruction
     * @return the decoded instruction object
     * @throws InvalidInstructionException when decoding is not successful
     */
    @Override
    public DecodedInstruction decode(int memoryPosition) throws InvalidInstructionException {
        this.memoryPosition = memoryPosition;
        bytesRead = 0;

        instruction = new DecodedInstruction();
%root_rule_calls%
        instruction.setImage(Arrays.copyOfRange(instructionBytes, 0, bytesRead));
        return instruction;
    }

    /**
     * Reads an arbitrary number of bits of the current instruction into a byte array.
     * @param start the number of bits from the start of the current instruction
     * @param length the number of bits to read
     * @return the bytes read
     */
    private byte[] readBytes(int start, int length) {
        int startByte = start / 8;
        int endByte = (start + length - 1) / 8;
        int clear = start % 8;
        int shift = (8 - ((start + length) % 8)) % 8;

        while (bytesRead <= endByte) {
            instructionBytes[bytesRead++] = ((Number) memory.read(memoryPosition++)).byteValue();
        }

        byte[] result = Arrays.copyOfRange(instructionBytes, startByte, endByte + 1);
        result[0] &= 0xFF >> clear;

        // right shift all bits
        for (int i = result.length - 1; i >= 0; i--) {
            result[i] = (byte) ((result[i] & 0xFF) >>> shift);
            if (i > 0)
                result[i] |= (result[i - 1] & (0xFF >>> (8 - shift))) << (8 - shift);
        }

        // if the leftmost byte is now unused
        if (result.length > 8 * length)
            result = Arrays.copyOfRange(result, 1, result.length);

        return result;
    }

    /**
     * Reads at most one unit (int) of the current instruction.
     * @param start the number of bits from the start of the current instruction
     * @param length the number of bits to read
     * @return the bits read
     */
    private int read(int start, int length) {
        int number = 0;
        byte[] bytes = readBytes(start, length);

        for (int i = 0; i < bytes.length; i++)
            number |= (bytes[i] & 0xFF) << (8 * (bytes.length - i - 1));

        return number;
    }
    
    %decoder_methods%
}