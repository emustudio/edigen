/*
 * Copyright (C) 2011 Matúš Sulír
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
options {
    STATIC = false;
}


PARSER_BEGIN(Parser)
package edigen.parser;

import edigen.misc.BitSequence;
import edigen.nodes.*;
import java.util.ArrayList;
import java.util.List;

public class Parser {
    public Specification parse() throws ParseException {
        try {
            return Start();
        } catch(TokenMgrError ex) {
            throw new ParseException(ex.getMessage());
        }
    }
}
PARSER_END(Parser)


// One-line comment
<*> SKIP :
{
    <"#" (~["\n", "\r"])*>
}

// White characters
<*> SKIP :
{
    " " | "\n" | "\r" | "\t"
}

// Special characters
TOKEN :
{
    <EQUALS: "=">
  | <COMMA: ",">
  | <SEMICOLON: ";">
  | <COLON: ":">
  | <OR: "|">
  | <PART_SEPARATOR: "%%">
}

// Identifiers and literals
TOKEN :
{
    <ID: (["A"-"Z", "a"-"z", "_"])+ (["A"-"Z", "a"-"z", "_", "0"-"9"])*>
  | <STRING: "\"" (~["\"", "\n", "\r"])* "\"">
  | <HEX_NUMBER: "0x" (["0"-"9", "A"-"F", "a"-"f"])+>
  | <DEC_NUMBER: "(" (["1"-"9"])+ (["0"-"9"])* ")">
  | <BIN_NUMBER: ("0" | "1")+>
}

<*> TOKEN :
{
    <UNEXPECTED: ~[]>
}


// Parser grammar
Specification Start():
{
    Decoder decoder;
    Disassembler disasm;
}
{
    decoder = Decoder()
    <PART_SEPARATOR>
    disasm = Disassembler()
    <EOF>
    { return new Specification(decoder, disasm); }
}

Decoder Decoder():
{
    Decoder decoder;
    Rule rule;
}
{
    { decoder = new Decoder(); }
    (
        rule = Rule()
        { decoder.addChild(rule); }
    )+
    { return decoder; }
}

Rule Rule():
{
    List<String> names;
    List<Variant> variants;
    Rule rule;
}
{
    names = RuleNameSet()
    <EQUALS>
    variants = VariantSet()
    <SEMICOLON>
    {
        rule = new Rule(names);
        for (Variant variant : variants)
            rule.addChild(variant);
        
        return rule;
    }
}

List<String> RuleNameSet():
{
    String name;
    List<String> names = new ArrayList<String>();
}
{
    name = RuleName()
    { names.add(name); }
    (
        <COMMA>
        name = RuleName()
        { names.add(name); }
    )*
    { return names; }
}

String RuleName():
{
    Token name;
}
{
    name = <ID>
    { return name.image; }
}

List<Variant> VariantSet():
{
    Variant variant;
    List<Variant> variants = new ArrayList<Variant>();
}
{
    variant = Variant()
    {variants.add(variant);}
    (
        <OR>
        variant = Variant()
        {variants.add(variant);}
    )*
    { return variants; }
}

Variant Variant():
{
    Variant variant = new Variant();
    String value;
}
{
    ( LOOKAHEAD(2) (
        Return(variant)
        <COLON>
    ) )?
    ( Pattern(variant) )+
    { return variant; }
}

void Return(Variant variant):
{
    Token value;
    String string;
}
{
    value = <ID>
        { variant.setReturnSubrule(new Subrule(value.image)); }
    | value = <STRING>
        {
            string = value.image.substring(1, value.image.length() - 1);
            variant.setReturnString(string);
        }
}

void Pattern(Variant variant):
{
    Subrule subrule;
    Pattern constant;
}
{
    subrule = SubRule()
        { variant.addChild(subrule); }
    | constant = Constant()
        { variant.addChild(constant); }
}

Subrule SubRule():
{
    String name;
    Integer length = null;
}
{
    name = SubRuleName()
    ( length = SubRuleLength() )?
    {
        if (length == null)
            return new Subrule(name);
        else
            return new Subrule(name, length);
    }
}

String SubRuleName():
{
    Token name;
}
{
    name = <ID>
    { return name.image; }
}

Integer SubRuleLength():
{
    Token length;
    String numberString;
}
{
    length = <DEC_NUMBER>
    {
        numberString = length.image.substring(1, length.image.length() - 1);
        return Integer.parseInt(numberString);
    }
}

Pattern Constant():
{
    BitSequence bits;
    Token constant;
}
{
    ( constant = <HEX_NUMBER>
        { bits = BitSequence.fromHexadecimal(constant.image.substring(2)); }
    | constant = <BIN_NUMBER>
        { bits = BitSequence.fromBinary(constant.image); } )
    { return new Pattern(bits); }
}

Disassembler Disassembler():
{
    Disassembler disasm = new Disassembler();
    Format format;
}
{
    (
        format = Format()
        { disasm.addChild(format); }
    )+
    { return disasm; }
}

Format Format():
{
    Format format;
    String string;
}
{
    string = FormatString()
    { format = new Format(string); }
    <EQUALS>
    ValueSet(format)
    <SEMICOLON>
    { return format; }
}

String FormatString():
{
    Token string;
}
{
    string = <STRING>
    { return string.image.replace("\"", ""); }
}

void ValueSet(Format format):
{
    Value value;
}
{
    (
        value = Value()
        { format.addChild(value); }
    )+
}

Value Value():
{
    Token name;
}
{
    name = <ID>
    { return new Value(name.image); }
}
