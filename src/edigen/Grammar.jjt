/*
 * Copyright (C) 2011 Matúš Sulír
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
options {
    STATIC = false;
    MULTI = true;
    VISITOR = true;
    NODE_PACKAGE = "edigen.tree";
    NODE_PREFIX = "";
}


PARSER_BEGIN(Parser)
package edigen.parser;

public class Parser {
    public SimpleNode parse() throws ParseException {
        try {
            return Start();
        } catch(TokenMgrError ex) {
            throw new ParseException(ex.getMessage());
        }
    }
}
PARSER_END(Parser)


// One-line comment
<*> SKIP :
{
    <"#" (~["\n", "\r"])*>
}

// White characters
<*> SKIP :
{
    " " | "\n" | "\r" | "\t"
}

// Operators
TOKEN :
{
    <EQUALS: "=">
  | <COMMA: ",">
  | <SEMICOLON: ";">
  | <COLON: ":">
  | <OR: "|">
  | <PART_SEPARATOR: "%%">
}

// Identifiers and literals
TOKEN :
{
    <ID: (["A"-"Z", "a"-"z", "_"])+ (["A"-"Z", "a"-"z", "_", "0"-"9"])*>
  | <STRING: "\"" (~["\"", "\n", "\r"])* "\"">
  | <HEX_NUMBER: "0x" (["0"-"9", "A"-"F", "a"-"f"])+>
  | <BIN_NUMBER: ("0" | "1")+>
}

// Decimal numbers can be located only inside parentheses
TOKEN :
{
    <LEFT_PAR: "("> : IN_PARENTHESES
}

<IN_PARENTHESES> TOKEN :
{
    <RIGHT_PAR: ")"> : DEFAULT
  | <DEC_NUMBER: (["1"-"9"])+ (["0"-"9"])*>
}

<*> TOKEN :
{
    <UNEXPECTED: ~[]>
}


// Parser grammar
SimpleNode Start(): {}
{
    DecoderPart() <PART_SEPARATOR> DisassemblerPart() <EOF>
    { return jjtThis; }
}

void DecoderPart(): {}
{
    (DecoderRule() <SEMICOLON>)+
}

void DecoderRule(): {}
{
    RuleSet() <EQUALS> VariantSet()
}

void RuleSet(): {}
{
    RuleName() (<COMMA> RuleName())*
}

void RuleName():
{ Token t; }
{
    t = <ID> { jjtThis.jjtSetValue(t.image); }
}

void VariantSet(): {}
{
    Variant() (<OR> Variant())*
}

void Variant(): {}
{
    [LOOKAHEAD(2) (ReturnSubRule() | ReturnString()) <COLON>] Pattern()
}

void ReturnSubRule():
{ Token t; }
{
    t = <ID> { jjtThis.jjtSetValue(t.image); }
}

void ReturnString():
{ Token t; }
{
    t = <STRING> { jjtThis.jjtSetValue(t.image); }
}

void Pattern(): {}
{
    (SubRule() | HexConstant() | BinConstant())+
}

void SubRule(): {}
{
    SubRuleName() [<LEFT_PAR> SubRuleLength() <RIGHT_PAR>]
}

void SubRuleName():
{ Token t; }
{
    t = <ID> { jjtThis.jjtSetValue(t.image); }
}

void SubRuleLength():
{ Token t; }
{
    t = <DEC_NUMBER> { jjtThis.jjtSetValue(t.image); }
}

void HexConstant():
{ Token t; }
{
    t = <HEX_NUMBER> { jjtThis.jjtSetValue(t.image); }
}

void BinConstant():
{ Token t; }
{
    t = <BIN_NUMBER> { jjtThis.jjtSetValue(t.image); }
}

void DisassemblerPart(): {}
{
    (DisassemblerRule() <SEMICOLON>)+
}

void DisassemblerRule(): {}
{
    Format() <EQUALS> ArgumentSet()
}

void ArgumentSet(): {}
{
    (Argument())+
}

void Format():
{ Token t; }
{
    t = <STRING> { jjtThis.jjtSetValue(t.image); }
}

void Argument():
{ Token t; }
{
    t = <ID> { jjtThis.jjtSetValue(t.image); }
}
