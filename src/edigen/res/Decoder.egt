class %decoder_class implements IDecoder {
    private IMemoryContext memory;
    private int memoryPosition;
    private byte unit;
    private byte[] instruction = new byte[128];
    private int bytesRead = 0;
    
    public %decoder_class(IMemoryContext memory) {
        this.memory = memory;
    }
    
    public void decode(int memoryPosition) {
        this.memoryPosition = memoryPosition;
        %root_rule();
    }
    
    private void read(int start, int length) {
        if (start + length > 8 * bytesRead) {
            instruction[bytesRead++] = memory.read(memoryPosition++);
        }
        
        int startByte = start / 8;
        int startOffset = start % 8;
        byte startMask = ~0 >>> (8 - startOffset);

        int endByte = (start + length) / 8;
        int endOffset = (startOffset + length) % 8;
        byte endMask = ~0 << (8 - endOffset);
        
        unit = 0;
        unit |= (instruction[startByte] & startMask) << endOffset;
        unit |= (instruction[endByte] & endMask) >> (8 - endOffset);
    }

    %decoder_methods
}